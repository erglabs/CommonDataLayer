syntax = "proto2";
package edge_registry;
import "common.proto";

service EdgeRegistry {
  rpc AddRelation(AddSchemaRelation) returns (RelationId);
  rpc GetRelation(RelationQuery) returns (RelationList);
  rpc GetSchemaByRelation(RelationId) returns (SchemaRelation);
  rpc GetSchemaRelations(SchemaId) returns (RelationList);
  rpc ValidateRelation(ValidateRelationQuery) returns (Empty);

  rpc AddEdges(ObjectRelations) returns (Empty);
  rpc GetEdge(RelationIdQuery) returns (Edge);
  rpc GetEdges(ObjectIdQuery) returns (ObjectRelations);

  rpc Heartbeat (Empty) returns (Empty);

  rpc ResolveTree (TreeQuery) returns (RelationTreeResponse);
}

message TreeQuery {
  optional Filter filters = 1;
  repeated common.Relation relations = 2;
}

message Filter {
    oneof filter_kind {
        SimpleFilter simple = 1;
        ComplexFilter complex = 2;
    }
}

message SimpleFilterSide {
    enum Side {
        InParentObjIds = 1;
        InChildObjIds = 2;
    }
    required Side side = 1;
}
message SimpleFilter {
    required SimpleFilterSide side = 1;
    required uint32 relation = 2;
    repeated string ids = 3; 
}

message ComplexFilter {
    required common.LogicOperator operator = 1;
    repeated Filter operands = 2;
}

message RelationTreeResponse {
  repeated RelationTreeRow rows = 1;
}

message RelationTreeRow {
  required string base_object_id = 1;
  repeated string relation_object_ids = 2;
}

message AddSchemaRelation {
  optional string relation_id = 1;
  required string parent_schema_id = 2;
  required string child_schema_id = 3;
}

message SchemaRelation {
  required string parent_schema_id = 1;
  required string child_schema_id = 2;
}

message RelationId {
  required string relation_id = 1;
}

message RelationQuery {
  repeated string relation_id = 1;
}

message ValidateRelationQuery {
  required string relation_id = 1;
}

message SchemaId {
  required string schema_id = 1;
}

message RelationDetails {
  required string relation_id = 1;
  required string parent_schema_id = 2;
  required string child_schema_id = 3;
}

message RelationList {
  repeated RelationDetails items = 1;
}

message ObjectRelations {
  repeated Edge relations = 1;
}

message Edge {
  required string relation_id = 1;
  required string parent_object_id = 2;
  repeated string child_object_ids = 3;
}

message RelationIdQuery {
  required string relation_id = 1;
  required string parent_object_id = 2;
}

message ObjectIdQuery {
  required string object_id = 1;
}

message Empty {}
